<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uit_menu_prev_next_form_menu_edit_menu_alter(&$form, &$form_state) {
  $menus = variable_get('uit_menu_prev_next_menus', array());
  $form['uit_menu_prev_next'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include a Previous Next Block for this menu'),
    '#default_value' => isset($menus[$form['old_name']['#value']]),
  );
}

/**
 * Implements hook_menu_update().
 */
function uit_menu_prev_next_menu_update($menu) {
  if (isset($menu['uit_menu_prev_next'])) {
    uit_menu_prev_next_set_menu($menu['menu_name'], $menu['title'], $menu['uit_menu_prev_next']);
  }
}

/**
 * Add or remove a menu from the uit_menu_prev_next_menus variable.
 *
 * @param string $menu_name
 *   A menu machine name.
 * @param mixed $status
 *   If $status evaluates to TRUE, the menu will be added. If $status evaluates
 *   to FALSE, the menu will be removed.
 */
function uit_menu_prev_next_set_menu($menu_name, $title, $status) {
  $menus = variable_get('uit_menu_prev_next_menus', array());
  if ($status && !isset($menus[$menu_name])) {
    $menus[$menu_name] = $title;
    variable_set('uit_menu_prev_next_menus', $menus);
  }
  elseif (!$status && isset($menus[$menu_name])) {
    unset($menus[$menu_name]);
    variable_set('uit_menu_prev_next_menus', $menus);
  }
}

/**
 * Implementation of hook_block_info()
 * This module creates a block for upcoming events
 */

function uit_menu_prev_next_block_info() {
  $menus = variable_get('uit_menu_prev_next_menus', array());
  foreach ($menus as $menu_name => $title) {
    $blocks['pn-' . $menu_name] = array(
      'info'  => t('Previous Next Block - ' . $title ),
      'cache' => DRUPAL_CACHE_PER_ROLE,
    );
  } 
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 * @param string $delta code to identify the block
*/

function uit_menu_prev_next_block_view($delta = '') {

  // set up an empty array which will contain the block contents
  $block = array();

  $menus = variable_get('uit_menu_prev_next_menus', array());
  $menu_keys = array_keys($menus);
  $menu_name = substr($delta, 3);

  if (in_array($menu_name, $menu_keys)) {
  
    $block_content = '';
    $links = array();

    get_links($links, $menu_name);

    if (array_key_exists(current_path(), $links)) {
      $prev_next_links = get_prev_next(current_path(), $links);
      $block_content .= theme('uit_menu_prev_next',array('links' => $prev_next_links));
    }

    $block['content'] = $block_content;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */

function uit_menu_prev_next_theme($existing, $type, $theme, $path) {
  return array(
    'uit_menu_prev_next' => array(
      'template' => 'uit_menu_prev_next',
      'variables' => array(
        'links' => NULL,
      ),
    ),
  );
}
function get_links(&$links, $menu_name, $plid = 0) {
  $query = db_select('menu_links', 'ml', array('fetch' => PDO::FETCH_ASSOC));
  $query->fields('ml', array('mlid', 'link_path', 'link_title', 'has_children'));
  $query->condition('ml.menu_name', $menu_name, '=');
  $query->condition('ml.plid', $plid, '=');
  $query->orderBy('ml.weight', 'ASC');
  $result = $query->execute();

  foreach ($result as $record) {
    if (preg_match('/node/', $record['link_path'])) {
      $links[$record['link_path']] = $record['link_title'];
    }
    if ($record['has_children']) {
      get_links($links, $menu_name, $record['mlid']);
    }
  }
}

function get_prev_next($key, $array) {
  $links = array();

  // If array is empty, return
  $num_keys = count($array);
  if ($num_keys == 0) { return; }

  // Find position within array
  $array_keys = array_keys($array);
  $key_pos = array_search($key, $array_keys);

  // Find previous, there is none if this is the first item in the menu
  if ($key_pos > 0) {
    $previous_key = $array_keys[$key_pos - 1]; 
    $previous_title = $array[$previous_key];
    $links['prev_url'] = $previous_key;
    $links['prev_title'] = $previous_title;
  }
 
  // Find next, there is none if this is the last item in the menu
  $next = '';
  if ($key_pos < ($num_keys - 1)) {
    $next_key = $array_keys[$key_pos + 1]; 
    $next_title = $array[$next_key];
    $links['next_url']   = $next_key;
    $links['next_title'] = $next_title;
  }

  return $links;
}
